#!/bin/bash
###############################################################################
#
# Script: functions
# Purpose: Various helper functions that are used by all scripts. 
#
###############################################################################
#

is_on() {
	[[ `ps -A | grep $1` ]] && { echo 1; } || { echo 0; } 
}

is_installed() {
	text="`$YUM list -q installed $1 2> /dev/null`";
	filename="`echo $text | cut  -d' ' -f 3- | cut -d. -f1`";

	[ "$filename" != "" ] && {
		[ "$filename" == "$1" ] && { echo 1; }
	} || {
		text="`$YUM list -q available $1 2> /dev/null`";
		filename="`echo $text | cut  -d' ' -f 3- | cut -d. -f1`";
		[ "$filename" == "$1" ] && { echo 2; } || { echo 0; }
	}
}

yum() {
	rval=0;

	[[ $(($ACTION&$REMOVE)) == $REMOVE ]] && { 
		[[ $(($PROP&$INSTALLED)) == $INSTALLED ]] && { 
			[ $SERVICE ] && { [ "`is_on $SERVICE`" == "1" ] && { service $SERVICE stop; }	}

			echo;
			$YUM $1 $2 $3; rval=$?
			[ "$rval" == "0" ] && { 
				PROP=$(($PROP&~$INSTALLED)); 
			} || {
				ERR_CODE=$(($ERR_CODE|$REMOVE_FAIL|$STOP));
				throw $REMOVE_FAIL;
			}
		} || { 
			ERR_CODE=$(($ERR_CODE|$NOT_INSTALLED|$WARNING));
			throw $NOT_INSTALLED; 
		}
		return $rval;
	}

	[[ $(($ACTION&$INSTALL)) == $INSTALL ]] && {
		# Remove package if already installed.
		[[ $(($PROP&$INSTALLED)) == $INSTALLED ]] && {
			ERR_CODE=$(($ERR_CODE|$ALREADY_INSTALLED|$WARNING));
			throw $ALREADY_INSTALLED;
			[ $SERVICE ] && { [ "`is_on $SERVICE`" == "1" ] && { service $SERVICE stop; } }

			[[ $(($RUNTIME&$INSTALL_DESTRUCTIVE)) == $INSTALL_DESTRUCTIVE ]] && {
				echo;
				$YUM -y remove $PACKAGE; rval=$?
				[ "$rval" == "0" ] && { 
					PROP=$(($PROP&~$INSTALLED)); 
				} || {
					ERR_CODE=$(($ERR_CODE|$REMOVE_FAIL|$STOP));
					throw $REMOVE_FAIL;
				}
			}
		}

		[ "$rval" == "0" ] && {
			echo;
			$YUM -y $2 $3; rval=$?;
			[ "$rval" == "0" ] && { PROP=$(($PROP|$INSTALLED)); } || { ERR_CODE=$(($ERR_CODE|$INSTALL_FAIL)); }
		}
		return $rval;
	}
}

throw() {
	case $1 in
		$REMOVE_FAIL)
			echo -e "\n${FG_RED}ERROR: \e[0mPackage (${FG_CYAN}$PACKAGE\e[0m) has failed to un-install.";
		;;
		$INSTALL_FAIL)
			echo -e "\n${FG_RED}ERROR: \e[0mPackage (${FG_CYAN}$PACKAGE\e[0m) has failed to install.";
		;;
		$NOT_INSTALLED)
			 echo -e "\n${FG_YELLOW}WARNING: \e[0mPackage (${FG_CYAN}$PACKAGE\e[0m) is not installed.";
		;;
		$ALREADY_INSTALLED)
			[[ $(($RUNTIME&$INSTALL_RESTORE)) == $INSTALL_RESTORE ]] && { 
				echo -e "\n${FG_YELLOW}WARNING: \e[0mPackage (${FG_CYAN}$PACKAGE\e[0m) is already installed, doing (${FG_CYAN}restore\e[0m) install.\n";
			} || {
				[[ $(($RUNTIME&$INSTALL_DESTRUCTIVE)) == $INSTALL_DESTRUCTIVE ]] && { echo -e "\n${FG_YELLOW}WARNING: \e[0mPackage (${FG_CYAN}$PACKAGE\e[0m) is already installed, doing (${FG_RED}destructive\e[0m) install.\n"; }
			} || {
				[[ $(($RUNTIME&$INSTALL_UPDATE)) == $INSTALL_UPDATE ]] && { echo -e "\n${FG_YELLOW}WARNING: \e[0mUpdating package (${FG_CYAN}$PACKAGE\e[0m).\n";	}
			}
		;;
	esac

	[ "$EXIT_ON_ERROR" == "true" ] && [[ $(($ERR_CODE&$STOP)) == $STOP ]] && {
		echo -e "Exiting script (${FG_CYAN}$PACKAGE\e[0m) do to previous error.\n";
		exit;
	}

	[ "$EXIT_ON_WARNING" == "true" ] && [[ $(($ERR_CODE&$STOP)) == $STOP ]] && {
		echo -e "Exiting script (${FG_CYAN}$PACKAGE\e[0m) do to previous warning.\n";
		exit;
	}
}

systemctl() {	
	case $1 in
		start)
			$SYSTEMCTL $1 $2
			rval=$?
			[ "$rval" == "0" ] && { 
				PROP=$(($PROP|$SERVICE_ON));
			} || { 
				echo -e "${FG_YELLOW}WARNING: \e[0mService (${FG_CYAN}$2\e[0m) failed to start."; 
			} 
		;;
		stop)
			$SYSTEMCTL $1 $2
			rval=$?
			[ "$rval" == "0" ] && { 
				PROP=$(($PROP&~$SERVICE_ON));
			} || { 
				echo -e "${FG_YELLOW}WARNING: \e[0mService (${FG_CYAN}$2\e[0m) failed has to stop."; 
			}
		;;
		restart)
			$SYSTEMCTL $1 $2
			rval=$?
			[ "$rval" == "0" ] && { 
				PROP=$(($PROP|$SERVICE_ON));
			} || { 
				echo -e "${FG_YELLOW}WARNING: \e[0mService (${FG_CYAN}$2\e[0m) failed has to re-start."; 
			}
		;;
		enable)
			$SYSTEMCTL $1 $2 2> /dev/null
			rval=$?
			[ "$rval" == "0" ] && { 
				PROP=$(($PROP|$ENABLE)); 
			} || { 
				ERR_CODE=$(($ERR_CODE|$ENABLE_FAIL|$STOP));
			}
		;;
		disable)
			$SYSTEMCTL $1 $2 2> /dev/null
			rval=$?
			[ "$rval" == "0" ] && { 
				PROP=$(($PROP&~$ENABLE)); 
			} || { 
				ERR_CODE=$(($ERR_CODE|$DISABLE_FAIL|$STOP));
			}
		;;
	esac

	return $rval;
}

do_query() {
	config="/tmp/.mysql.cfg.$$"
	command="/tmp/.mysql.cmd.$$"

	touch $config $command
	chmod 600 {$config,$command}

cat > "$config" << EOF
[mysql]
user=$DB_ADM
password='$DB_ADM_PW'
EOF

	echo "$1" > $command
	mysql --defaults-file=$config < $command
	rval=$?
	rm -f  $config $command
	return $rval
}

get_param() {
	echo `cat conf/$1 | grep  "^$2" | head -n 1 | cut -f2 -d=`
}

rev_ip() {
	echo $1 | ( IFS='.' read a b c d; echo "$d.$c.$b.$a" )
}

get_ip() { 
	return `ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'`
}

yes_no() {
	echo -n "(Y/N)? "
	while read -r -n 1 -s answer; do
		[[ $answer = [YyNn] ]] && {
			[[ $answer = [Yy] ]] && { retval=0; } || { retval=1; }
			break;
		}
	done
	echo

	return $retval
}

action() {
	index=0
	options=$1

	arguments=($options)
	for argument in $options; do
		index=`expr $index + 1`
		case $argument in
			-r) ACTION=$(($ACTION|$REMOVE)) ;;
			remove) ACTION=$(($ACTION|$REMOVE)) ;;
			-i) ACTION=$(($ACTION|$INSTALL)) ;;
			install) ACTION=$(($ACTION|$INSTALL)) ;;
			-c) ACTION=$(($ACTION|$RESTART)) ;;
			restart) ACTION=$(($ACTION|$RESTART)) ;;
			-f) CONFIG="${arguments[index]}" ;;
		esac
	done
}

header() {
	[[ $(($ACTION&$INSTALL)) == $INSTALL ]] && { action="Installation"; } || { [[ $(($ACTION&$REMOVE)) == $REMOVE ]] && { action="Removal"; } }
	echo -e "${FG_BLUE}===============================================================================\e[0m"
	echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA}Action: \e[0m$action of package (${FG_CYAN}$PACKAGE\e[0m)."
	echo -e "${FG_CYAN}===============================================================================\e[0m"
	echo -e "${FG_BLUE}= \e[0mRunning script (${FG_CYAN}$PACKAGE\e[0m) on (${FG_YELLOW}$DOMAIN\e[0m)." 
	echo -e "${FG_CYAN}===============================================================================\e[0m"
}

footer() {
	echo -e "\n${FG_CYAN}===============================================================================\e[0m"
	[[ $(($ACTION&$INSTALL)) == $INSTALL ]] && {
		[[ $(($PROP&$INSTALLED)) == $INSTALLED ]] && { 
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} ACTION\e[0m: Installation of package (${FG_CYAN}$PACKAGE\e[0m).";
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} RESULT\e[0m: Package (${FG_CYAN}$PACKAGE\e[0m) was installed (${FG_WHITE}successfully\e[0m).";
		} || {
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} ACTION\e[0m: Installation of package (${FG_CYAN}$PACKAGE\e[0m).";
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} RESULT\e[0m: Package (${FG_CYAN}$PACKAGE\e[0m) was installed (${FG_RED}failed\e[0m).";
		}
	}

	[[ $(($ACTION&$REMOVE)) == $REMOVE ]] && {
		[[ $(($PROP&$INSTALLED)) == $INSTALLED ]] && { 
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} ACTION\e[0m: Removal of package (${FG_CYAN}$PACKAGE\e[0m).";
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} RESULT\e[0m: Package (${FG_CYAN}$PACKAGE\e[0m) has (${FG_RED}failed\e[0m) to un-install.";
		} || {
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} ACTION\e[0m: Removal of package (${FG_CYAN}$PACKAGE\e[0m).";
			[[ $ERR_CODE == "0" ]] && echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} RESULT\e[0m: Package (${FG_CYAN}$PACKAGE\e[0m) was removed (${FG_WHITE}successfully\e[0m).";
			[[ $(($ERR_CODE&$NOT_INSTALLED)) == $NOT_INSTALLED ]] && echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA} RESULT\e[0m: No action taken, package (${FG_CYAN}$PACKAGE\e[0m) is not currently installed.";
		}
	}	

	[ $SERVICE ] && {
		[[ $(($PROP&$SERVICE_ON)) == $SERVICE_ON ]] && { 
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA}SERVICE\e[0m: Service (${FG_CYAN}$SERVICE\e[0m) is currently running.";
		} || { 
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA}SERVICE\e[0m: Service (${FG_CYAN}$SERVICE\e[0m) is currently not running.";
		}

		[[ $(($PROP&$ENABLE)) == $ENABLE ]] && { 
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA}STARTUP\e[0m: Service (${FG_CYAN}$SERVICE\e[0m) will start at boot time.";
		} || { 
			echo -e "${FG_BLUE}= \e[0m${FG_MAGENTA}SERVICE\e[0m: Service (${FG_CYAN}$SERVICE\e[0m) will not start at boot time.";
		}
	}

	echo -e "${FG_BLUE}===============================================================================\e[0m"

	s=$[$(date +%s) - $start_time]; h=$[$s / 3600]; s=$[$s - $[$h * 3600]]; m=$[$s / 60]; s=$[$s - $[m * 60]]
	[ "$h" != '0' ] && hours=" ${FG_YELLOW}$h\e[0m hours" || hours=""
	[ "$m" != '0' ] && minutes=" ${FG_YELLOW}$m\e[0m minutes and" || minutes=""

	echo -e "${FG_BLUE}= \e[0m Current runtime$hours$minutes ${FG_YELLOW}$s\e[0m seconds."
	echo -e "${FG_BLUE}===============================================================================\e[0m\n"
}

initialise() {
	#Set default read write access, directories 755 (rwxr-xr-x) and files 644 (rw-r--r--)
	sed -i 's/umask 002/umask 022/' /etc/profile
	sed -i 's/umask 002/umask 022/' /etc/bashrc

	# Turn on syntax highlighting 
	alias vi='vim'
	alias less='less -R'
	echo "alias vi='vim'" >> ~/.bashrc
	echo "alias less='less -R'" >> ~/.bashrc

	# Set default command prompt style.
	echo "export PS1=\"\u@$DOMAIN:\w> \"" >> /etc/bashrc

	# Update all installed packages.
	echo -e "${FG_BLUE}===============================================================================\e[0m"
	echo -e "${FG_BLUE}= \e[0m${FG_WHITE}Updating installed packages."
	echo -e "${FG_BLUE}=${FG_CYAN}==============================================================================\e[0m"

	echo;
	$YUM -y clean all
	$YUM -y install deltarpm 
	$YUM -y update

	echo -e "${FG_BLUE}=${FG_CYAN}==============================================================================\e[0m"
	echo -e "${FG_BLUE}= \e[0m${FG_WHITE}Finished updating installed packages."	
	echo -e "${FG_BLUE}===============================================================================\e[0m"
	echo -e "\n\n"
}

finalise() {
	# Harden remote ssh login.
	sed -i '/^#LoginGraceTime/ c\LoginGraceTime 5m' /etc/ssh/sshd_config
	sed -i '/^#PermitRootLogin/ c\PermitRootLogin no' /etc/ssh/sshd_config
	sed -i '/^#PermitEmptyPasswords/ c\PermitEmptyPasswords no' /etc/ssh/sshd_config
	sed -i '/^#StrictModes/ c\StrictModes yes' /etc/ssh/sshd_config
	echo
}

menu() {
	retval=0;
	while true; do
		clear
		echo -e
		echo -e "###############################################################################";
		echo -e
		echo -e "              ${FG_YELLOW}Slingshot Server Configuration Script\e[0m";
		echo -e 
		echo -e "###############################################################################";
		echo -e 
		echo -e "                       *** \e[0m${FG_MAGENTA}PLEASE NOTE\e[0m ***";
		echo -e 
		echo -e " This script has to connect to remote servers to download the required,";
		echo -e " source software packages. Failure to connect to these resources will cause the,";
		echo -e " package install to fail and any packages that depend on them. Always view, ";
		echo -e " the log files after the installation has finished for any errors.";
		echo -e 
		echo -e " The install log files are availble at (~/logs) on the target host ($INET_IP).";
		echo -e 
		echo -e "###############################################################################"
		echo -e "\nThis script will configure the remote server ($DOMAIN) at address ($INET_IP).";
		echo -e "\nLocal IP=($LOCAL_IP), Target IP=($INET_IP), Target User=($USER_ID)";
		echo -e
		echo -e " b: Slingshot Base Install";
		echo -e " e: Slingshot Base Install + Extras";
		echo -e " q: Quit";
		echo -e 
		echo -n "Enter choice (b/e/q): ";
		read ans;
		case "$ans" in
			'q') retval=1; break; ;;
			'b') retval=2; break; ;;
			'e') retval=3; break; ;;
		esac
	done;

	echo  -e "\n###############################################################################"

	return $retval
}